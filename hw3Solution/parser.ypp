%{
	#include <stdio.h>
	#include <iostream>
	#include "structs.hpp"
	#include "hw3_output.hpp"
	

	
	int yylex();
	void yyerror(const char*);
	extern int yylineno;
	
	using namespace std;
	using namespace output;
	
	Symbol_Table symbolTable = Symbol_Table();
	Function* curFunc;
	Enum_class* curEnumClass;
	stack<vector<Node*>> ParamListStack = stack<vector<Node*>>();
	
	
	

%}




%token  VOID INT BYTE B BOOL ENUM TRUE FALSE RETURN ELSE WHILE BREAK CONTINUE SC COMMA LBRACE RBRACE ID NUM STRING
%right ASSIGN
%left OR
%left AND
%left EQUALOP
%left RELATIONOP
%left ADDOPS
%left MULTOPS
%right LPAREN RPAREN
%right IF ELSE
%right NOT


%%

Program : 		Enums Funcs 										
						{};


Funcs :			/*epsilon*/ 													
						{}
				| FuncDecl Funcs 													
						{};



FuncDecl :		RetType ID  {
							if(symbolTable.getVar($2->name) != nullptr){
								errorDef(yylineno, $2->name);
								delete $1;
								delete $2;
								exit(0);
							}
						
							curFunc = new Function($2->name,$1->type);
							$2->type = FUNCTION_t;
							
						} LPAREN Formals RPAREN LBRACE 
						{
					
						symbolTable.insertFunc(curFunc);
						
						
						}
						Statements RBRACE 
						{	
							
							
							symbolTable.closeScope();
							delete $1;
							delete $2;
						
						}
						;

Enums :			/*epsilon*/ 															
						{}
				| EnumDecl Enums 													
						{};

EnumDecl :		ENUM ID {
							Node* var = symbolTable.getVar("enum " + $2->name );
							if ( (var != nullptr && var->type == ENUM_CLASS_t)){
							errorDef(yylineno,"enum " + $2->name);
							delete $2;
							exit(0);
							}
							
							curEnumClass = new Enum_class("enum " + $2->name);
							delete $2;
							
						} LBRACE EnumeratorList RBRACE SC 	
							//TODO ceck with offset
						{symbolTable.insertVar(curEnumClass);};

RetType :		Type 														
						{$$ = $1;}
				| VOID 																
						{$$ = new Node(VOID_t);};

Formals :		/*epsilon*/ 												
						{}
				| FormalsList 														
						{};

FormalsList :	FormalDecl 													
						{}
				| FormalDecl COMMA FormalsList 									
						{};

FormalDecl :	Type ID 													
						{
							
							
							curFunc->addParam(new Variable($1->type,$2->name));
							$2->type = $1->type;
						
						}
				| EnumType ID 														
						{
							auto tmp = (Enum_class*)$1;
							if(!symbolTable.CheckIfEnumInGlobalScope(tmp)){
							//check this
							errorUndef(yylineno,$1->name);
							delete $1;
							exit(0);
							}
							curFunc->addParam(new Enum_var(ENUM_t,$2->name,0,"",$1->name));
							$2->type = $1->type;
						
						};


EnumeratorList :	Enumerator 											
						{
						}
				| EnumeratorList COMMA Enumerator 									
						{};

Enumerator :		ID 															
						{curEnumClass->enum_vals.push_back($1->name);
						  delete $1;
						};

Statements :	Statement 													
						{}
				| Statements Statement 												
						{};

Statement :		LBRACE OPENORMAL Statements RBRACE CLOSE
				| Type ID SC 														

						{	
							Variable* var = symbolTable.getVar($2->name);
							if(var != nullptr){
								cout<< "\t\t in rule: Type ID SC 	, line 164 in parser" << endl << "new var name = " << var->name <<endl;
								errorDef(yylineno, $2->name);
								delete $1;
								delete $2;
								exit(0);
							}
							var = new Variable($1->type,$2->name);
							symbolTable.insertVar(var);


							

							delete $1;
							delete $2;
						}
				| EnumType ID  SC 													
						{
						
						Variable* var = symbolTable.getVar($2->name);
							if(var != nullptr){
								errorDef(yylineno, $2->name);
								delete $1;
								delete $2;
								exit(0);
							}
							//check here abut value
							var = new Enum_var(ENUM_t,$2->name,0,"",$1->name);
							symbolTable.insertVar(var);

							delete $1;
							delete $2;
						
						
						}
				| EnumDecl 															
		
						{}
				| Type ID ASSIGN Exp SC 											
						{
							
							
							Variable* var = symbolTable.getVar($2->name);
							if(var != nullptr){
								errorDef(yylineno, $2->name);
								delete $1;
								delete $2;
								delete $4;
								exit(0);
							}
							if($1->type != $4->type && (!($1->type == INT_t  && $4->type == BYTE_t  )) )
							{
								errorMismatch(yylineno);
								delete $1;
								delete $2;
								delete $4;
								exit(0);
							}
							
							
							var = new Variable($1->type,$2->name);
							//var->value = $4->value;						
							symbolTable.insertVar(var);

							cout<< "\t\t in rule: Type ID ASSIGN Exp SC 	, line 223 in parser" << endl << "new var name = " << var->name <<endl;

							//symbolTable.p_sys_stack(symbolTable.scopes_table);

							//delete $1;
							//delete $2;
							
							
						}
				| EnumType ID {
								Variable* var = symbolTable.getVar($2->name);
								if(var != nullptr){
								errorDef(yylineno, $2->name);
								delete $2;
							
								exit(0);
								}
							}
				ASSIGN Exp { 
								auto tmp = (Enum_class*)$1;
								if (! tmp->contains($4->name) ){
											errorUndefEnumValue(yylineno,$4->name);
											delete $2;
											
											exit(0);		
								
								}
							}
				SC{
								Enum_var* new_var = new Enum_var(ENUM_t,$2->name,0,$4->value,$1->name);
										symbolTable.insertVar(new_var);
										
										delete $2;
										
				}	
				| ID ASSIGN Exp SC 													
						{
							Variable* var = symbolTable.getVar($1->name);
							if(var == nullptr ){
								errorDef(yylineno, $2->name);
								delete $1;
								delete $3;
								exit(0);
							}
							if((var->type != $3->type) && (var->type != INT_t && $3->type != BYTE_t)){
								errorMismatch(yylineno);
								delete $1;
								delete $3;
								exit(0);
							}
							var->value = $3->value;

							delete $1;
							delete $3;
						}
				| Call SC 															
						{}
				| RETURN SC 														
						{
							auto& scope = symbolTable.scopes_table[symbolTable.scopes_table.size()-1];
							assert(scope.curFunc != nullptr);//grammar makes sure
							auto f = scope.curFunc;
							if(f->returnType != VOID_t){
								errorMismatch(yylineno);
								exit(0);
							}
						}
				| RETURN Exp SC 													
						{
							auto& scope = symbolTable.scopes_table[symbolTable.scopes_table.size()-1];
							assert(scope.curFunc != nullptr);//grammar makes sure
							auto f = scope.curFunc;
							if(f->returnType != $2->type && (f->returnType != INT_t && $2->type != BYTE_t) ){
								errorMismatch(yylineno);
								delete $2;
								exit(0);
							}
						}
				| IF LPAREN checkBoolExp RPAREN Statement   									
						{
						}
				| IF LPAREN checkBoolExp   RPAREN 
							
							Statement 
							ELSE 
							{ /*symbolTable.p_sys_stack(symbolTable.scopes_table); */}
							Statement 
						{}
				| WHILE LPAREN checkBoolExp 
				{
					//TODO stamtent will open the new scope
					// symbolTable.openScope(LOOP);
				} RPAREN  Statement 									
						{
						//	symbolTable.closeScope();
						 }
				| BREAK SC 															
						{
							auto& scope = symbolTable.scopes_table[symbolTable.scopes_table.size()-1];
							if(!scope.isLoop){
								errorUnexpectedBreak(yylineno);
								exit(0);
							}
						}
				| CONTINUE SC 														
						{
							auto& scope = symbolTable.scopes_table[symbolTable.scopes_table.size()-1];
							if(!scope.isLoop){
								errorUnexpectedContinue(yylineno);
								exit(0);
							}
						};
checkBoolExp :     Exp {
				
						if($1->type != BOOL_t)
						{
							errorMismatch(yylineno);
							exit(0);
						}
					}
Call :			ID LPAREN {ParamListStack.push(vector<Node*>()); } ExpList RPAREN 										
						{
							Function* callee = (Function*)symbolTable.getVar($1->name);
							auto& vec = ParamListStack.top();

							if (callee == nullptr || callee->type != FUNCTION_t){
								delete $1;
								errorUndefFunc(yylineno, $1->name);
								
								for(int i = 0; i< vec.size() ; ++i)
									delete vec[i];
								
								ParamListStack.pop();
								exit(0);
							}
							delete $1;
							callee->ValidateParameters(vec);
							$$ = new Node(callee->returnType);

							for(int i = 0; i< vec.size() ; ++i)
								delete vec[i];	
							ParamListStack.pop();

						}

				| ID LPAREN RPAREN 													
						{
							Function* callee = (Function*)symbolTable.getVar($1->name);
							if (callee == nullptr || callee->type != FUNCTION_t){
								delete $1;
								errorUndefFunc(yylineno, $1->name);
								exit(0);
							}
							delete $1;
							//check about the delete here 
							auto tmp = vector<Node*>();
							callee->ValidateParameters(tmp);
							$$ = new Node(callee->returnType);

						};

ExpList :		Exp 														
						{ParamListStack.top().push_back($1);}
				| Exp COMMA ExpList 												
						{ParamListStack.top().push_back($1);};

Type :			INT 															
						{
						
					
						$$ = new Node(INT_t);}
				| BYTE 																
						{$$ = new Node(BYTE_t);}
				| BOOL 																
						{
						
						$$ = new Node(BOOL_t);};

EnumType :		ENUM ID 													
						{Node* var = symbolTable.getVar("enum " + $2->name);
							if (var == nullptr){
							
							errorUndefEnum(yylineno,"enum " + $2->name);
							delete $2;
							exit(0);
							}
							delete $2;
							$$ = var;
						};
						

Exp :			LPAREN Exp RPAREN 											
						{$$ = $2;}

				| Exp ADDOPS Exp 													
						{ if (($1->type != INT_t && $1->type !=BYTE_t) || ($3->type != INT_t && $3->type != BYTE_t)){
							errorMismatch(yylineno);
							delete $1;
							delete $3;
							exit(0);
						}
						if ($1->type == BYTE_t && $3->type == BYTE_t){
							
							$$ = new Node(BYTE_t);
						}
						else{ 
							$$= new Node(INT_t);
							
							}

						}
				| Exp MULTOPS Exp 													
						{ if (($1->type != INT_t && $1->type !=BYTE_t) || ($3->type != INT_t && $3->type != BYTE_t)){
							errorMismatch(yylineno);
							delete $1;
							delete $3;
							exit(0);
						}
						if ($1->type == BYTE_t && $3->type == BYTE_t){
							
							$$ = new Node(BYTE_t);
						}
						else{ 
							$$= new Node(INT_t);
							
							}

						}

				| ID 																
					{ Variable* var = symbolTable.getVar($1->name);
							if(var == nullptr){
								errorUndef(yylineno, $1->name);
								delete $1;
								exit(0);
							}
		
							
						$$ = var;
					}

				| Call 																
					{
						if($1->type == VOID_t){
							errorMismatch(yylineno);
							exit(0);
						}
						$$ = $1;
					}

				| NUM 																
						{ 
						$$ = new Node(INT_t , "" , $1->value);
							delete $1;
						}

				| NUM B 														
					{	if( !( stoi($1->value) >= 0 && (stoi($1->value) <= 255))){
										
											errorByteTooLarge(yylineno, $1->value);
											delete $1;
											exit(0);
										}
						$$ = new Node(BYTE_t,"",$1->value);
						delete $1;

					}

				| STRING 															
						{$$ = new Node(STRING_t);}

				| TRUE 																
						{$$ = new Node(BOOL_t);}

				| FALSE 															
						{$$ = new Node(BOOL_t);}
						
				| NOT Exp 															
						{
							if($2->type != BOOL_t){
									errorMismatch(yylineno);
									delete $2;
									exit(0);
							}
							
							$$ = new Node(BOOL_t);
							
						}


				| Exp AND Exp 														
						{
							if($1->type != BOOL_t || $3->type != BOOL_t){
									errorMismatch(yylineno);
									delete $1;
									delete $3;
									exit(0);
							}
							$$ = new Node(BOOL_t);
							

						}

				| Exp OR Exp 														
						{
							if($1->type != BOOL_t || $3->type != BOOL_t){
									errorMismatch(yylineno);
									delete $1;
									delete $3;
									exit(0);
							}
							$$ = new Node(BOOL_t);
							
						}

				| Exp RELATIONOP Exp 												
						{
							
							
							if( ($1->type != INT_t && $1->type != BYTE_t) || ($3->type != INT_t && $3->type != BYTE_t)){
									errorMismatch(yylineno);
									delete $1;
									delete $3;
									exit(0);
							}
							
							$$ = new Node(BOOL_t);
							
						}

				| Exp EQUALOP Exp 													
						{
							if(($1->type != INT_t && $1->type != BYTE_t) || ($3->type != INT_t && $3->type != BYTE_t)){
									errorMismatch(yylineno);
									delete $1;
									delete $3;
									exit(0);
							}
							$$ = new Node(BOOL_t);
							
						}

				| LPAREN Type {
								if ( $2->type != INT_t){
								delete $2;
								errorMismatch(yylineno);
								exit(0);
								} 
							}

							RPAREN Exp 											
						{
							Node* enum_var = symbolTable.getVar($4->name);
							if (enum_var == nullptr){
								delete $2;
								delete $4;
								errorUndef(yylineno,$4->name);
								exit(0);
							}
							
							if (enum_var->type != ENUM_t){
								delete $2;
								delete $4;
								errorMismatch(yylineno);
								exit(0);
							}
							
							auto enum_var_casted = (Enum_var*)enum_var; 
							Variable* new_int = new Variable(INT_t,enum_var_casted->name,enum_var_casted->offset,enum_var_casted->value);
							delete $2;
							$$ = new_int;
						};
						
						
OPENORMAL:					{symbolTable.openScope(NORMAL);};
CLOSE:						{symbolTable.closeScope();};


%%



int main()
{

	symbolTable.openScope(GLOBAL);
	curFunc = new Function("print", VOID_t);
	Variable* dummy = new Variable(STRING_t);
	curFunc->addParam(dummy);
	symbolTable.insertFunc(curFunc);
	symbolTable.scopes_table.pop_back();
	symbolTable.offset_stack.pop();
	
	curFunc = new Function("printi", VOID_t);
	dummy = new Variable(INT_t,"");
	curFunc->addParam(dummy);
	symbolTable.insertFunc(curFunc);
	symbolTable.scopes_table.pop_back();
	symbolTable.offset_stack.pop();
	
	yyparse();
	
	
	
	/*checking if main exsists*/
	Function* main_func = (Function*)symbolTable.getVar("main");
	if (main_func == nullptr || main_func->type != FUNCTION_t || main_func->paramTypes.size()!= 0 || main_func->returnType != VOID_t){
		errorMainMissing();
		return 0;
	}
	
	symbolTable.closeScope();


    return 0;
}

void yyerror(char const* error){
	errorSyn(yylineno);
	exit(0);
}





